#!/usr/bin/env bash

IFS=''
TARGET_CODE="$1"
SELF_REP_COPY="${1#TEMPLATE_}"
LQUOTE=""
RQUOTE=""
ECHO_OPT=""
READ_OPT=""

if [ -z "$1" ]; then
	echo "error: no argument provided"
	exit 1
fi

case "$1" in
	'TEMPLATE_ColleenV1.c')
		echo 'const char	*g_source_code[] = {' > "$SELF_REP_COPY"
		LQUOTE='	"'
		RQUOTE='\n",'
		;;
	'TEMPLATE_Colleen.c')
		echo 'char*t[]={' > "$SELF_REP_COPY"
		echo '"char*t[]={",' >> "$SELF_REP_COPY"
		echo '"0};",' >> "$SELF_REP_COPY"
		LQUOTE='"'
		RQUOTE='",'
		;;
	'TEMPLATE_Grace.c')
		ECHO_OPT="-n"
		echo "$ECHO_OPT" \
			'#define TEXT char*t[]={"#define TEXT char*t[]={","0}",' \
			> "$SELF_REP_COPY"
		LQUOTE='"'
		RQUOTE='",'
		;;
	'TEMPLATE_Sully.c')
		echo 'int i = 5;' > "$SELF_REP_COPY"
		echo 'char*src[]={' >> "$SELF_REP_COPY"
		echo '"char*src[]={",' >> "$SELF_REP_COPY"
		echo '"0};",' >> "$SELF_REP_COPY"
		LQUOTE='"'
		RQUOTE='",'
		;;
	'TEMPLATE_Colleen.s' | 'TEMPLATE_Grace.s' | 'TEMPLATE_Sully.s')
		cat "$TARGET_CODE" > "$SELF_REP_COPY"
		LEN="$(wc -l "$TARGET_CODE" | awk '{print $1}')"
		LEN="$(echo 'obase=16;'$LEN'+2' | bc)"
		echo "TXT_LINE_COUNT equ 0x"$LEN >> "$SELF_REP_COPY"
		echo "txt:" >> "$SELF_REP_COPY"
		LQUOTE='db "'
		RQUOTE='", 0x0'
		;;
	'TEMPLATE_Colleen.rs' | 'TEMPLATE_Grace.rs' | 'TEMPLATE_Sully.rs')
		echo -n > "$SELF_REP_COPY"
		if [ "$1" = 'TEMPLATE_Sully.rs' ]; then
			echo 'static I: i32 = 5;' >> "$SELF_REP_COPY"
		fi
		LQUOTE='    "'
		RQUOTE='",'
		LEN="$(wc -l "$TARGET_CODE" | awk '{print $1}')"
		LEN="$(echo $LEN'+3' | bc)"
		if [ "$1" = 'TEMPLATE_Grace.rs' ]; then
			echo 'macro_rules! src_macro { () => { static SRC: [&str; '$LEN'] = [' >> "$SELF_REP_COPY"
			echo $LQUOTE'macro_rules! src_macro { () => { static SRC: [&str; '$LEN'] = ['$RQUOTE >> "$SELF_REP_COPY"
			echo $LQUOTE'];}}'$RQUOTE >> "$SELF_REP_COPY"
		else
			echo 'static SRC: [&str; '$LEN'] = [' >> "$SELF_REP_COPY"
			echo $LQUOTE'static SRC: [&str; '$LEN'] = ['$RQUOTE >> "$SELF_REP_COPY"
			echo $LQUOTE'];'$RQUOTE >> "$SELF_REP_COPY"
		fi
		REAL_TARGET_CODE="$TARGET_CODE"
		TARGET_CODE="."$TARGET_CODE".tmp"
		echo > "$TARGET_CODE"
		while read -re -N1 LETTER; do
			[ "$LETTER" = "\\" ] && LETTER="\\\\\\"
			[ "$LETTER" = "\"" ] && LETTER="\\\\""$LETTER"
			echo -ne "$LETTER" >> "$TARGET_CODE"
		done < "$REAL_TARGET_CODE"
		READ_OPT="-re"
		;;
	*)
		echo "error: invalid argument"
		exit 1
		;;
esac

while read $READ_OPT; do
	echo $ECHO_OPT "$LQUOTE""$REPLY""$RQUOTE" >> "$SELF_REP_COPY"
done < "$TARGET_CODE"

case "$1" in
	'TEMPLATE_ColleenV1.c')
		echo '	0' >> "$SELF_REP_COPY"
		echo '};' >> "$SELF_REP_COPY"
		cat "$TARGET_CODE" >> "$SELF_REP_COPY"
		;;
	'TEMPLATE_Colleen.c')
		echo '0};' >> "$SELF_REP_COPY"
		cat "$TARGET_CODE" >> "$SELF_REP_COPY"
		;;
	'TEMPLATE_Grace.c')
		echo '0}' >> "$SELF_REP_COPY"
		cat "$TARGET_CODE" >> "$SELF_REP_COPY"
		;;
	'TEMPLATE_Sully.c')
		echo '0};' >> "$SELF_REP_COPY"
		cat "$TARGET_CODE" >> "$SELF_REP_COPY"
		;;
	'TEMPLATE_Colleen.s' | 'TEMPLATE_Grace.s' | 'TEMPLATE_Sully.s')
		echo 'db "TXT_LINE_COUNT equ 0x'$LEN'", 0x0' >> "$SELF_REP_COPY"
		echo 'db "txt:", 0x0' >> "$SELF_REP_COPY"
		if [ "$1" = 'TEMPLATE_Sully.s' ]; then
			echo 'INTEGER dq 5' >> "$SELF_REP_COPY"
		fi
		;;
	'TEMPLATE_Colleen.rs' | 'TEMPLATE_Grace.rs' | 'TEMPLATE_Sully.rs')
		rm "$TARGET_CODE"
		if [ "$1" = 'TEMPLATE_Grace.rs' ]; then
			echo '];}}' >> "$SELF_REP_COPY"
		else
			echo '];' >> "$SELF_REP_COPY"
		fi
		echo >> "$SELF_REP_COPY"
		cat "$REAL_TARGET_CODE" >> "$SELF_REP_COPY"
		;;
esac
